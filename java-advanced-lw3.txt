Lab Work 3 (Java Advanced 2024) Multithreading

Назва проекту task3
_______________________

Контрольні питання.

1. Життєвий цикл потоку. Коли потік завершує виконання?
2. Потоки-демони: що це таке, які їх властивості, для чого використовуються та як перетворити звичайний потік у демон?
3. Синхронізація: для чого вона потрібна?
4. Що підлягає синхронізації. Які ресурси або ділянки коду можна синхронізувати?
5. Монітор синхронізації. Яку роль він відіграє у керуванні доступом до синхронізованого коду?
6. Методи sleep та wait. У чому полягає різниця між ними?
7. Метод join. Як він працює і навіщо використовується?
8. Методи interrupt, interrupted, isInterrupted, яке їх призначення та як вони застосовуються?
9. Методи зняття блокування монітора: які саме методи виконують цю функцію?
10. Які основні проблеми можуть виникати при паралельному виконанні потоків?

---------------------------------------------------------------------

Зауваження.

У кореневому пакеті має бути клас Demo, який демонструє функціональність всіх подзадач.

Для вирішення кожної підзадачі X буде гарантовано використано кілька потоків:
  потік, який виконує метод PartX.main (це той самий потік, який виконує Demo.main);
  деяка кількість дочірніх потоків.
  
Завершуйте виконання дочірніх потоків ДО ТОГО, як буде завершено метод PartX.main

Не використовувати типи java.util.concurrent.*

---------------------------------------------------------------------



-------------------------------------------------------
Part 1
-------------------------------------------------------
Назва класу: ua.nure.task3.Part1
-------------------------------------------------------

Створіть дочірній потік, який протягом приблизно 1 секунди друкуватиме своє ім'я кожні триста мілісекунд. Реалізуйте це трьома способами:
  * за допомогою наслідування класу Thread;
  * за допомогою реалізації інтерфейсу Runnable;
  * використовуючи посилання на статичний метод, який реалізує вказану функціональність.
  
Продемонструйте роботу всіх трьох варіантів. Виконання має бути послідовним: спочатку відпрацьовує одна реалізація, потім друга, а потім третя.



-------------------------------------------------------
Part 2
-------------------------------------------------------
Назва класу:
ua.nure.task3.Spam
ua.nure.task3.Part2
-------------------------------------------------------

Створіть клас Spam, який приймає в конструкторі масив повідомлень та відповідний за розміром масив інтервалів часу в мілісекундах. Клас повинен виводити відповідні повідомлення на екран через задані інтервали часу, використовуючи для цього відповідну кількість дочірніх потоків.

Після натискання клавіші Enter додаток має завершити свою роботу. Цю функціональність реалізуйте в методі Spam.main.

Рекомендована структура класу Spam:
-------------------------------------------------------
public class Spam {
	private Thread[] threads;
	
	public Spam(String[], int[]) {...}
	
	public void start() {...}
	public void stop() {...}
	private static class Worker extends Thread {...}
	
	public static void main(String[] args) {...}
-------------------------------------------------------

Вхідні дані (масив повідомлень та масив пауз) записувати в коді класу Spam. Кількість елементів у кожному з масивів - мінімум 2, їх можна взяти з прикладу (див. нижче).

Приклад вхідної інформації:
-------------------------------------------------------
String[] messages = new String[] { "@@@", "bbbbbbb" };
int[] times = new int[] { 333, 222 };
-------------------------------------------------------

У методі Part2.main змоделювати введення Enter через 2 сек.

Приклад (не обов'язково робити саме так) алгоритм моделювання консольного введення (метод Part2.main):
-------------------------------------------------------
a) підмінити системний потік введення на свій власний
   System.setIn(YOUR_OWN_INPUT_STREAM);
 
b) в окремому потоці викликати Spam.main
   Thread t = new Thread() { public void run() {Spam.main(null);}};
   t.start();
 
c) дочекатися завершення Spam.main
   t.join();
 
d) відновити системний потік
   System.setIn(CAСHED_VALUE_OF_SYSTEM_IN)
-------------------------------------------------------

(4) Для реалізації власного потоку введення доцільно створити клас, який розширює абстрактний клас java.io.InputStream. При цьому доведеться реалізувати єдиний абстрактний метод цього класу:

-------------------------------------------------------
public abstract int read() throws IOException;
-------------------------------------------------------

Всі методи класу InputStream (а також всіх його спадкоємців), які читають байти з джерела інформації, зрештою викликають метод read.

Достатньо реалізувати паузу в цьому методі при першому його виклику, що змусить потік виконання, який викликав метод read, очікувати.

Метод read повинен послідовно повертати байти, які відповідають обмежувачу рядка, після чого постійно повертати -1 (ознака того, що інформації у вхідному потоці більше немає).



-------------------------------------------------------
Part3
-------------------------------------------------------
Назва класу: ua.nure.task3.Part3
-------------------------------------------------------

Створити клас з таким вмістом:
-------------------------------------------------------
public class Part3 {
	private int c1;
	private int c2;
	
	private Thread[] threads;
	
	...
	
	public Part3(int n, int k, int t) { ...	}
	
	public void reset() { ... }	
	public void test() { ... }
	public void testSync() { ... }	
	
	public static void main(String[] args) {
		Part3 p = new Part3(3, 5, 100);
		p.test();
		p.reset();
		p.testSync();
	}	
}
-------------------------------------------------------

Метод test запускає виконання n дочірніх потоків, кожен з яких у циклі виконує k ітерацій, де на кожній ітерації:
  * друкує значення лічильників c1 та c2, розділені пропуском;
  * збільшує перший лічильник c1 на одиницю;
  * засинає на t мілісекунд;
  * збільшує другий лічильник c2 на одиницю.

Метод testSync виконує ту ж саму функцію, що й test, але вміст циклу підлягає синхронізації.

Реалізувати наступну схему (див. метод Part3.main):
  * відпрацьовує несинхронізований варіант (test);
  * відпрацьовує синхронізований варіант (testSync).

Зауваження. Перед тим, як розпочне роботу синхронізований варіант, обнуліть значення лічильників (reset).



-------------------------------------------------------
Part4
-------------------------------------------------------
Назва класу: ua.nure.task3.Part4
Вхідну інформацію завантажувати з файлу part4.txt
-------------------------------------------------------

Розпаралелюйте задачу пошуку максимального значення в матриці цілих чисел розміром MxN (M рядків, N стовпців) за допомогою M потоків. Вхідні дані завантажуйте з файлу part4.txt.

Додатково реалізуйте задачу пошуку максимального значення без розпаралелювання. Виведіть результати та час виконання коду (у мілісекундах) для обох варіантів.

У обох випадках кожну операцію порівняння необхідно забезпечити затримкою в 1 мілісекунду!

Дотримуйтесь наступного формату виводу:
-------------------------------------------------------
MAX
TIME1
MAX
TIME2
-------------------------------------------------------

де
  * MAX, TIME1 - максимальне значення та час пошуку при багатопотоковому розв'язанні задачі;
  * MAX, TIME2 - максимальне значення та час пошуку в однопотоковому варіанті.

Роботу програми перевірити на матриці 4×100 випадкових чисел.

Вміст файлу part4.txt повинен являти собою читабельну матрицю, числа розділені пробілами, рядки розділені обмежувачем рядка.

Зауваження.

(1) Обмежувач рядка має бути платформонезалежним (враховувати це під час читання інформації).

(2) Вхідний файл part4.txt створити будь-яким зручним для вас способом до запуску Part4.main (наприклад, за допомогою якогось допоміжного класу). Додаток (Part4.main) файл part4.txt не створює та вміст його не модифікує, розмірність матриці визначати за вмістом part4.txt

Приклад вмісту part4.txt для M=5, N=20
-------------------------------------------------------
706 575 855 882 595 778 477 602 147 467 693 793 120 384 256 866 548 367 910 848
206 232 632 315 743 823 620 111 279 548 210 393 791 815 519 768 168 484 780 705
709 127 900 171 189 590 563 317 600 975 892 296 166 353 863 312 399 872 964 591
302 869 679 157 419 485 325 290 739 149 407 648 688 474 311 177 318 611 348 557
559 283 171 352 698 759 384 822 598 410 802 293 962 859 812 153 436 392 869 167
-------------------------------------------------------

Приклад виведення результату
-------------------------------------------------------
975
26
975
115
-------------------------------------------------------

Для вхідних даних3 M=4, N=100 час розпаралеленого пошуку має бути приблизно в 4 рази менше, ніж час пошуку в однопотоковому варіанті.



-------------------------------------------------------
Part 5
-------------------------------------------------------
Назва класу: ua.nure.task3.Part5
Вихідну інформацію записувати у файл part5.txt
-------------------------------------------------------

Створити K (1 <= K <= 10) потоків, які одночасно пишуть в той самий файл символи. Якщо K=10, то:

-------------------------------------------------------
перший потік записує цифру 0 рівно N разів на 1-му рядку файлу;
другий потік записує цифру 1 рівно N разів на 2-му рядку файлу;
...
десятий потік записує цифру 9 рівно N разів на 10-му рядку файлу.
-------------------------------------------------------

Вимоги до реалізації.
(1) В обов'язковому порядку запис кожної цифри забезпечити паузою 1 мс!
(2) Для запису у файл використовуйте клас RandomAccessFile.
(3) Допускається використання не більше одного об'єкта класу RandomAccessFile!
(4) Перед початком роботи файл, у який буде відбуватися запис, повинен бути видалений, якщо він існує.
(5) Головний потік після запуску дочірніх потоків на виконання повинен дочекатися їх завершення, після чого вивести в консоль вміст файлу.
(6) Для демонстрації роботи програми використовувати K=10, N=20.

Зауваження.

(1) Метод RandomAccessFile#seek(long) дозволяє пересувати покажчик усередині файлу. Кожен потік повинен знати де файлу йому записувати інформацію. Так як в умові фігурує термін "рядок", слід виведення кожного потоку завершувати обмежувачем рядка, який виводити крос-платформним чином.

(2) Переміщення вказівника всередині файлу та запис інформації необхідно синхронізувати.

Результат роботи програми
-------------------------------------------------------
00000000000000000000
11111111111111111111
22222222222222222222
33333333333333333333
44444444444444444444
55555555555555555555
66666666666666666666
77777777777777777777
88888888888888888888
99999999999999999999
-------------------------------------------------------



-------------------------------------------------------
Part 6
-------------------------------------------------------
Назва класу: ua.nure.task3.Part6
-------------------------------------------------------

У головному потоці створити і запустити виконання дочірній потік.
Послідовно перекласти та роздрукувати стан дочірнього потоку:
NEW ==> RUNNABLE ==> BLOCKED ==> WAITING or TIMED_WAITING ==> TERMINATED

Зауваження.
1) метод Thread.sleep не використовувати;
2) дозволяється використовувати лише один монітор синхронізації (див. нижче).
3) багаторазовий запуск програми виконання повинен генерувати той самий результат.

Заглушка класу Part6:
-------------------------------------------------------
public class Part6 {

	private static final Object M = new Object();

	public static void main(String[] args) throws InterruptedException {
		Thread t = new Thread() {
			public void run() {
				// place your code here
			}
		};

		// place your code here
	}
}
-------------------------------------------------------

Результат виводиться в консоль:
-------------------------------------------------------
BLOCKED
WAITING
TERMINATED
-------------------------------------------------------
